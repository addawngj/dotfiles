## Author: An Dang <addawngj@gmail.com>
##
## i3wm configuration
##
## i3 config file (v4)

##-- Mod Keys ----------------------------------
set $MOD Mod4
set $ALT Mod1

##-- General Settings --------------------------

## Floating Modifier
##
## To move floating windows with your mouse, you can either grab their titlebar 
## or configure the so-called floating modifier which you can then press and click
## anywhere in the window itself to move it.
##
## When holding the floating modifier, you can resize a floating window by pressing 
## the right mouse button on it and moving around while holding it.
## If you hold the shift button as well, the resize will be proportional
## (the aspect ratio will be preserved).
floating_modifier $MOD

#------

## Orientation for new workspaces
##
## New workspaces get a reasonable default orientation: Wide-screen monitors 
## (anything wider than high) get horizontal orientation, rotated monitors 
## (anything higher than wide) get vertical orientation.
##
## Syntax: default_orientation horizontal|vertical|auto
default_orientation auto

#------

## Layout mode for new containers
##
## This option determines in which mode new containers on workspace level will start.
##
## Syntax: workspace_layout default|stacking|tabbed
workspace_layout default

#------

## Window title alignment
##
## This option determines the window title’s text alignment. Default is left
##
## Syntax: title_align left|center|right
title_align center

## Print all window titles in format of 'class | title'
for_window [class=".*"] title_format "%class | %title"

## Enable window icons for all windows
for_window [all] title_window_icon off

## Enable window icons for all windows with extra horizontal padding
#for_window [all] title_window_icon padding 5px

#------

## Default border style for new windows
##
## This option determines which border style new windows will have. The default is `normal`.
## Note that `default_floating_border` applies only to windows which are starting out
## as floating windows, e.g., dialog windows, but not windows that are floated later on.
##
## Setting border style to `pixel` eliminates title bars. The border style `normal` 
## allows you to adjust edge border width while keeping your title bar.
##
## Syntax: 
#default_border normal|none|pixel
#default_border normal|pixel <px>
#default_floating_border normal|none|pixel
#default_floating_border normal|pixel <px>
#default_border pixel 2
#default_floating_border pixel 2

#------

## Hiding borders adjacent to the screen edges
##
## You can hide container borders adjacent to the screen edges using `hide_edge_borders`
## (the default is none). Hiding borders is useful if you are using scrollbars, 
## or do not want to waste even two pixels in displayspace.
##
## The `smart` setting hides borders on workspaces with only one window visible, 
## but keeps them on workspaces with multiple windows visible.
##
## The `smart_no_gaps` setting hides edge-specific borders of a container if the
## container is the only container on its workspace and the gaps to the screen edge are 0.
##
## Syntax: hide_edge_borders none|vertical|horizontal|both|smart|smart_no_gaps
hide_edge_borders none

#------

## Smart borders
##
## Smart borders will draw borders on windows only if there is more than one window 
## in a workspace. This feature can also be enabled only if the gap size between 
## window and screen edge is 0.
##
## Syntax: smart_borders on|off|no_gaps
#smart_borders on

#------

## Don’t focus window upon opening
##
## When a new window appears, it will be focused. The `no_focus` directive allows 
## preventing this from happening and must be used in combination with [command_criteria].
##
## Syntax: no_focus <criteria>
#no_focus [window_role="pop-up"]

#------

## Automatically putting workspaces on specific screens
##
## If you assign clients to workspaces, it might be handy to put the workspaces on 
## specific screens. Also, the assignment of workspaces to screens will determine 
## which workspace i3 uses for a new screen when adding screens or when starting 
## (e.g., by default it will use 1 for the first screen, 2 for the second screen and so on).
##
## Syntax: workspace <workspace> output <output1> [output2]…
##
## The `output` is the name of the RandR output you attach your screen to. 
## On a laptop, you might have VGA1 and LVDS1 as output names. 
## You can see the available outputs by running `xrandr --current`
#workspace 1 output LVDS1
#workspace 2 output primary
#workspace 5 output VGA1 LVDS1
#workspace "2: vim" output VGA1

#------

## Interprocess communication
##
## i3 uses Unix sockets to provide an IPC interface. This allows third-party programs
## to get information from i3, such as the current workspaces (to display a workspace bar), and to control i3.
##
## You can override the default path through the environment-variable `I3SOCK` 
## or by specifying the `ipc-socket` directive.This is discouraged, though, 
## since i3 does the right thing by default. If you decide to change it, 
## it is strongly recommended to set this to a location in your home directory
## so that no other user can create that directory.
#ipc-socket ~/.i3/i3-ipc.sock

#------

## Focus follows mouse
##
## By default, window focus follows your mouse movements as the mouse crosses window borders.
## However, if you have a setup where your mouse usually is in your way 
## (like a touchpad on your laptop which you do not want to disable completely),
## you might want to disable `focus follows mouse` and control focus only by using your keyboard.
## The mouse will still be useful inside the currently active window (for example to click on links in your browser window).
##
## Syntax: focus_follows_mouse yes|no
focus_follows_mouse yes

#------

## Mouse warping
##
## By default, when switching focus to a window on a different output 
## (e.g. focusing a window on workspace 3 on output VGA-1, coming from workspace 2 on LVDS-1),
## the mouse cursor is warped to the center of that window.
##
## With the `mouse_warping` option, you can control when the mouse cursor should be warped. 
## `none` disables warping entirely, whereas `output` is the default behavior described above.
##
## Syntax: mouse_warping output|none
mouse_warping none

#------

## Popups during fullscreen mode
##
## When you are in fullscreen mode, some applications still open popup windows (take Xpdf for example).
## This is because these applications might not be aware that they are in fullscreen mode 
## (they do not check the corresponding hint).
## There are three things which are possible to do in this situation.
##
## Syntax: popup_during_fullscreen smart|ignore|leave_fullscreen
popup_during_fullscreen smart

#------

## Focus wrapping
##
## By default, when in a container with several windows or child containers,
## the opposite window will be focused when trying to move the focus over the edge of
## a container (and there are no other containers in that direction) — the focus wraps.
##
## Syntax: focus_wrapping yes|no|force|workspace
# Disable focus wrapping
#focus_wrapping no
# Force focus wrapping
#focus_wrapping force

#------

## Forcing Xinerama
##
## As explained in-depth in https://i3wm.org/docs/multi-monitor.html, some X11 video
## drivers (especially the nVidia binary driver) only provide support for Xinerama 
## instead of RandR. In such a situation, i3 must be told to use the inferior Xinerama
## API explicitly and therefore don’t provide support for reconfiguring your screens 
## on the fly (they are read only once on startup and that’s it).
##
## Syntax: force_xinerama yes|no
#force_xinerama yes

#------

## Automatic back-and-forth when switching to the current workspace
##
## This configuration directive enables automatic `workspace back_and_forth` 
## when switching to the workspace that is currently focused.
##
## Syntax: workspace_auto_back_and_forth yes|no
workspace_auto_back_and_forth yes

#------

## Delaying urgency hint reset on workspace change
##
## If an application on another workspace sets an urgency hint, switching to this 
## workspace might lead to immediate focus of the application, which also means the 
## window decoration color would be immediately reset to `client.focused`. 
## This might make it unnecessarily hard to tell which window originally raised the event.
##
## In order to prevent this, you can tell i3 to delay resetting the urgency state by
## a certain time using the `force_display_urgency_hint` directive.
## Setting the value to 0 disables this feature. The default is 500ms.
##
## Syntax: force_display_urgency_hint <timeout> ms
force_display_urgency_hint 500 ms

#------

## Focus on window activation
##
## If a window is activated, e.g., via `google-chrome www.google.com`, it may request to take focus.
## Since this might not be preferable, different reactions can be configured.
##
## Note that this might not affect windows that are being opened. 
## To prevent new windows from being focused.
##
## Syntax: focus_on_window_activation smart|urgent|focus|none
focus_on_window_activation smart

#------

## Drawing marks on window decoration
##
## If activated, marks on windows are drawn in their window decoration. 
## However, any mark starting with an underscore in its name (_) will not be drawn
## even if this option is activated.
##
## The default for this option is yes.
##
## Syntax: show_marks yes|no
show_marks yes

#------

## Tiling drag
##
## You can configure how to initiate the tiling drag feature.
##
## Syntax:
#tiling_drag off
#tiling_drag modifier|titlebar [modifier|titlebar]
tiling_drag modifier titlebar

##-- Autostart ---------------------------------

## Automatically starting applications on i3 startup
##
## By using the `exec` keyword outside a keybinding, you can configure which commands
## will be performed by i3 on initial startup. `exec` commands will not run when 
## restarting i3, if you need a command to run also when restarting i3 you should
## use the `exec_always` keyword. These commands will be run in order.
##
## Syntax:
#exec [--no-startup-id] <command>
#exec_always [--no-startup-id] <command>
exec_always --no-startup-id ~/.config/scripts/i3/autostart.sh

## The --no-startup-id parameter disables startup-notification support for this particular exec command.
## With startup-notification, i3 can make sure that a window appears on the workspace on which you used the exec command.

## Theme

##-- Theme Variables ---------------------

#~ Fonts
set $i3_fonts JetBrainsMono Nerd Font 10

#~ Border
set $i3_border_size 2
set $i3_border_style pixel

#~ Gaps
set $i3_gaps_inner 10
set $i3_gaps_outer 0
set $i3_gaps_smart off

#~ Colors
set $i3_cl_col_bg #1e222a
set $i3_cl_col_fg #c8ccd4
set $i3_cl_col_in #98c379
set $i3_cl_col_afoc #da6e89
set $i3_cl_col_ifoc #61afef
set $i3_cl_col_ufoc #292e39
set $i3_cl_col_urgt #c678dd
set $i3_cl_col_phol #1e222a

##-- Fonts (Global) ----------------------

## i3 has support for both X core fonts and FreeType fonts (through Pango) to render window titles.
## To generate an X core font description, you can use `xfontsel`
#font <X core font description>
#font pango:<family list> [<style options>] <size>

## Examples
#font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
#font pango:DejaVu Sans Mono 10
#font pango:DejaVu Sans Mono, Terminus Bold Semi-Condensed 11
#font pango:Terminus 11px

font pango:$i3_fonts

##-- Border ------------------------------

## Default border style for new/existing windows
for_window [class=".*"] border $i3_border_style $i3_border_size

##-- Gaps --------------------------------

## Gaps
##
## Since i3 4.22, you can configure window gaps. “Gaps” are added spacing between 
## windows (or split containers) and to the screen edges.
##
## Syntax:
##
## Inner gaps for all windows: space between two adjacent windows.
#gaps inner <gap_size>[px]

## Outer gaps for all windows: space along the screen edges.
#gaps outer|horizontal|vertical|top|left|bottom|right <gap_size>[px]

## Inner and outer gaps for all windows on a specific workspace.
## <ws> can be a workspace number or name.
#workspace <ws> gaps inner <gap_size>[px]
#workspace <ws> gaps outer|horizontal|vertical|top|left|bottom|right <gap_size>[px]

## Enabling “Smart Gaps” means no gaps will be shown when there is
## precisely one window or split container on the workspace.
##
## inverse_outer only enables outer gaps when there is exactly one
## window or split container on the workspace.
#smart_gaps on|off|inverse_outer

gaps inner $i3_gaps_inner
gaps outer $i3_gaps_outer
smart_gaps $i3_gaps_smart

##-- Colors ------------------------------

## You can change all colors which i3 uses to draw the window decorations.
## Syntax: <colorclass> <border> <background> <text> <indicator> <child_border>

# class                  border            backgr.           text            indicator       child_border
client.focused           $i3_cl_col_afoc   $i3_cl_col_afoc   $i3_cl_col_bg   $i3_cl_col_in   $i3_cl_col_afoc
client.focused_inactive  $i3_cl_col_ifoc   $i3_cl_col_ifoc   $i3_cl_col_bg   $i3_cl_col_in   $i3_cl_col_ifoc
client.unfocused         $i3_cl_col_ufoc   $i3_cl_col_ufoc   $i3_cl_col_fg   $i3_cl_col_in   $i3_cl_col_ufoc
client.urgent            $i3_cl_col_urgt   $i3_cl_col_urgt   $i3_cl_col_fg   $i3_cl_col_in   $i3_cl_col_urgt
client.placeholder       $i3_cl_col_phol   $i3_cl_col_phol   $i3_cl_col_fg   $i3_cl_col_in   $i3_cl_col_phol
client.background        $i3_cl_col_bg

## Keybindings

##-- Key Bindings ------------------------

## A keysym (key symbol) is a description for a specific symbol, like "a" or "b", 
## but also more strange ones like "underscore" instead of "_".
## These are the ones you use in Xmodmap to remap your keys. 
## To get the current mapping of your keys, use `xmodmap -pke`.
## To interactively enter a key and see what keysym it is configured to, use `xev`.
##
## Keycodes do not need to have a symbol assigned (handy for custom vendor hotkeys on some notebooks)
## and they will not change their meaning as you switch to a different keyboard layout (when using `xmodmap`). 
##
## If you often switch keyboard layouts but you want to keep your bindings in the 
## same physical location on the keyboard, use keycodes.
## If you don’t switch layouts, and want a clean and simple config file, use keysyms.
##
## Available Modifiers: Mod1-Mod5, Shift, Control
##
## Syntax:
# bindsym [--release] [<Group>+][<Modifiers>+]<keysym> command
# bindcode [--release] [<Group>+][<Modifiers>+]<keycode> command

##-- Variables ---------------------------
set $terminal ~/.config/scripts/i3/term.sh
set $music_player spotify
set $color_picker ~/.config/scripts/i3/colorpicker.sh
set $brightness ~/.config/scripts/i3/brightness.sh
set $volume ~/.config/scripts/i3/volume.sh
set $screenshot flameshot
set $alacritty alacritty --config-file ~/.config/alacritty/alacritty.toml
set $rofi_applets ~/.config/scripts

## -- Terminal --
bindsym $MOD+Return 			exec --no-startup-id $terminal

## -- Rofi Applets --
bindsym $MOD+d 				    exec --no-startup-id $rofi_applets/rofi/launcher.sh
bindsym $MOD+n 					exec --no-startup-id $rofi_applets/network_menu.py
bindsym $MOD+o 					exec --no-startup-id $rofi_applets/rofi/powermenu.sh
bindsym $MOD+y 					exec --no-startup-id $rofi_applets/rofi/windows.sh
bindsym $MOD+m 					exec --no-startup-id $rofi_applets/rofi/music.sh
bindsym $MOD+u 					exec --no-startup-id $rofi_applets/rofi/asroot.sh

## -- Function keys --
bindsym XF86MonBrightnessUp 	exec --no-startup-id "$brightness --inc"
bindsym XF86MonBrightnessDown 	exec --no-startup-id "$brightness --dec"
bindsym XF86AudioRaiseVolume 	exec --no-startup-id "$volume --inc"
bindsym XF86AudioLowerVolume 	exec --no-startup-id "$volume --dec"
bindsym XF86AudioMute 			exec --no-startup-id "$volume --toggle"
bindsym XF86AudioMicMute 		exec --no-startup-id "$volume --toggle-mic"
bindsym XF86AudioNext 			exec --no-startup-id "playerctl next"
bindsym XF86AudioPrev 			exec --no-startup-id "playerctl previous"
bindsym XF86AudioPlay 			exec --no-startup-id "playerctl play-pause"
bindsym XF86AudioStop 			exec --no-startup-id "playerctl stop"

## -- Screenshots --
bindsym Print 					exec --no-startup-id "$screenshot gui"

## -- Misc --
bindsym --release $MOD+p 		exec --no-startup-id $color_picker
bindsym $MOD+i 			        exec --no-startup-id "betterlockscreen --lock"

##-- WM Specific -------------------------

## Kill focused window
##
bindsym $MOD+Shift+q kill

#------

## Send Notification
##
set $send-notify exec --no-startup-id dunstify -u low -h string:x-dunst-stack-tag:i3config

## Splitting containers
##
## split in horizontal orientation
bindsym $MOD+g split horizontal, $send-notify 'Split Horizontally'
## split in vertical orientation
bindsym $MOD+v split vertical, $send-notify 'Split Vertically'
## toggle split
#bindsym $MOD+g split toggle, $send-notify 'Split Mode'

#------

## Manipulating layout
##
## change container layout (stacked, tabbed, toggle split)
## Set stacking layout
bindsym $MOD+s layout stacking, $send-notify 'Layout - Stacking'
## Set tabbed layout
bindsym $MOD+t layout tabbed, $send-notify 'Layout - Tabbed'
## Set default layout
bindsym $MOD+e layout default, $send-notify 'Layout - Default'
## Toggle between stacking/tabbed/split:
bindsym $MOD+x layout toggle, $send-notify 'Cycling Layouts'
## Toggle between horizontal/vertical:
bindsym $MOD+c layout toggle split, $send-notify 'Layout - Hor/Vert'
## Toggle fullscreen
bindsym $MOD+f fullscreen toggle, $send-notify 'Toggled Fullscreen'
## Toggle floating/tiling
bindsym $MOD+space floating toggle, $send-notify 'Toggled Floating Mode'

#------

## Focusing containers
##
## Sets focus to the nearest container in the given direction.
bindsym $MOD+h focus left
bindsym $MOD+j focus down
bindsym $MOD+k focus up
bindsym $MOD+l focus right

bindsym $MOD+Left focus left
bindsym $MOD+Down focus down
bindsym $MOD+Up focus up
bindsym $MOD+Right focus right
## Sets focus to the parent container of the current container.
bindsym $MOD+a focus parent
## The opposite of `focus parent`, sets the focus to the last focused child container.
# bindsym $MOD+d focus child
## Automatically sets focus to the adjacent container.
bindsym $MOD+Tab focus next
## Toggles focus between floating/tiling containers.
bindsym $MOD+Shift+space focus mode_toggle

#------

## Moving containers
##
## move focused window in the given direction.
bindsym $MOD+Shift+h move left
bindsym $MOD+Shift+j move down
bindsym $MOD+Shift+k move up
bindsym $MOD+Shift+l move right

bindsym $MOD+Shift+Left move left
bindsym $MOD+Shift+Down move down
bindsym $MOD+Shift+Up move up
bindsym $MOD+Shift+Right move right

#------

## restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $MOD+Shift+r restart, $send-notify 'i3wm Restarted!'
## reload the configuration file
bindsym $MOD+Shift+c reload, $send-notify 'Configuration Reloaded!'
## quit i3 session
bindsym $MOD+Shift+e exit

#------

## Changing (named) workspaces/moving to workspaces
##
## Define names for default workspaces for which we configure key bindings later on.
## We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"

## switch to workspace
bindsym $MOD+1 workspace number $ws1
bindsym $MOD+2 workspace number $ws2
bindsym $MOD+3 workspace number $ws3
bindsym $MOD+4 workspace number $ws4
bindsym $MOD+5 workspace number $ws5
bindsym $MOD+6 workspace number $ws6
bindsym $MOD+7 workspace number $ws7
bindsym $MOD+8 workspace number $ws8
bindsym $MOD+9 workspace number $ws9
bindsym $MOD+0 workspace number $ws10

## move focused container to workspace
bindsym $MOD+Shift+1 move container to workspace number $ws1
bindsym $MOD+Shift+2 move container to workspace number $ws2
bindsym $MOD+Shift+3 move container to workspace number $ws3
bindsym $MOD+Shift+4 move container to workspace number $ws4
bindsym $MOD+Shift+5 move container to workspace number $ws5
bindsym $MOD+Shift+6 move container to workspace number $ws6
bindsym $MOD+Shift+7 move container to workspace number $ws7
bindsym $MOD+Shift+8 move container to workspace number $ws8
bindsym $MOD+Shift+9 move container to workspace number $ws9
bindsym $MOD+Shift+0 move container to workspace number $ws10

## move a container to the next/previous workspace
bindsym $MOD+Control+l "move container to workspace next, workspace next"
bindsym $MOD+Control+h "move container to workspace prev, workspace prev"

bindsym $MOD+Control+Right "move container to workspace next, workspace next"
bindsym $MOD+Control+Left "move container to workspace prev, workspace prev"

## switch between the current and the previously focused one
bindsym $MOD+b workspace back_and_forth
bindsym $MOD+Shift+b "move container to workspace back_and_forth, workspace back_and_forth"

## Mousebindings

##-- Mouse Bindings ------------------------

## A mouse binding makes i3 execute a command upon pressing a specific mouse button 
## in the scope of the clicked container.
## You can configure mouse bindings in a similar way to key bindings.
##
## Syntax:
# bindsym [--release] [--border] [--whole-window] [--exclude-titlebar] [<Modifiers>+]button<n> command

## By default, the binding will only run when you click on the titlebar of the window.
## If the `--release` flag is given, it will run when the mouse button is released.
## If the `--whole-window` flag is given, the binding will also run when any part of 
## the window is clicked, with the exception of the border. 
## To have a bind run when the border is clicked, specify the `--border` flag.
## If the `--exclude-titlebar` flag is given, the titlebar will not be considered for the keybinding.

## Kill the container with middle button click on titlebar
bindsym --release button2 kill

## Kill the container with Super+middle button click on anywhere in a window
bindsym --whole-window $MOD+button2 kill

## Modes

## Resize container (you can also use the mouse for that)
mode "Resize" {
	# These bindings trigger as soon as you enter the 'Resize' mode	
    bindsym h resize shrink width 10 px or 10 ppt
	bindsym j resize grow height 10 px or 10 ppt
	bindsym k resize shrink height 10 px or 10 ppt
	bindsym l resize grow width 10 px or 10 ppt

	bindsym Left resize shrink width 10 px or 10 ppt
	bindsym Down resize grow height 10 px or 10 ppt
	bindsym Up resize shrink height 10 px or 10 ppt
	bindsym Right resize grow width 10 px or 10 ppt
	
	# back to normal: Enter or Escape or $MOD+r
	bindsym Return mode "default"
	bindsym Escape mode "default"
	bindsym $MOD+r mode "default"
}
bindsym $MOD+r mode "Resize"

#------

## Move container (you can also use the mouse for that)
mode "Move" {
	# These bindings trigger as soon as you enter the 'Move' mode
    bindsym h move left 20px
	bindsym j move down  20px
	bindsym k move up 20px
	bindsym l move right 20px

	bindsym Left move left 20px
	bindsym Down move down  20px
	bindsym Up move up 20px
	bindsym Right move right 20px
	
	# back to normal: Enter or Escape or $MOD+m
	bindsym Return mode "default"
	bindsym Escape mode "default"
	bindsym $MOD+Shift+m mode "default"
}
bindsym $MOD+Shift+m mode "Move"

#------

## Gaps
set $mode_gaps Gaps: (o)uter, (i)nner
set $mode_gaps_outer Outer Gaps: +|-|0 (local), Shift + +|-|0 (global)
set $mode_gaps_inner Inner Gaps: +|-|0 (local), Shift + +|-|0 (global)

## Outer Gaps
mode "$mode_gaps_outer" {
	bindsym plus  gaps outer current plus 5
	bindsym minus gaps outer current minus 5
	bindsym 0     gaps outer current set 0
	
	bindsym Shift+plus  gaps outer all plus 5
	bindsym Shift+minus gaps outer all minus 5
	bindsym Shift+0     gaps outer all set 0
	
	bindsym Return mode "$mode_gaps"
	bindsym Escape mode "default"
}

## Inner Gaps
mode "$mode_gaps_inner" {
	bindsym plus  gaps inner current plus 5
	bindsym minus gaps inner current minus 5
	bindsym 0     gaps inner current set 0
	
	bindsym Shift+plus  gaps inner all plus 5
	bindsym Shift+minus gaps inner all minus 5
	bindsym Shift+0     gaps inner all set 0
	
	bindsym Return mode "$mode_gaps"
	bindsym Escape mode "default"
}

mode "$mode_gaps" {
	bindsym o      mode "$mode_gaps_outer"
	bindsym i      mode "$mode_gaps_inner"
	bindsym Return mode "$mode_gaps"
	bindsym Escape mode "default"
}

bindsym $MOD+Shift+g mode "$mode_gaps"

## Rules

##-- Workspace Rules ------------------------

## Automatically putting clients on specific workspaces
##
## To automatically make a specific window show up on a specific workspace, 
## you can use an 'assignment'. You can match windows by using any criteria.
## The difference between assign and `for_window <criteria> move to workspace` is that
## the former will only be executed when the application maps the window 
## (mapping means actually displaying it on the screen) but the latter will be executed
## whenever a window changes its properties to something that matches the specified criteria.
##
## Thus, it is recommended that you match on window classes (and instances, when appropriate)
## instead of window titles whenever possible because some applications first create
## their window, and then worry about setting the correct title. Firefox with Vimperator
## comes to mind. The window starts up being named Firefox, and only when Vimperator is 
## loaded does the title change. As i3 will get the title as soon as the application 
## maps the window, you’d need to have to match on Firefox in this case. Another known
## issue is with Spotify, which doesn’t set the class hints when mapping the window, 
## meaning you’ll have to use a for_window rule to assign Spotify to a specific workspace.
## Finally, using assign [tiling] and assign [floating] is not supported.
##
## You can also assign a window to show up on a specific output. You can use RandR 
## names such as 'VGA1' or names relative to the output with the currently focused 
## workspace such as 'left' and 'down'.
##
## Assignments are processed by i3 in the order in which they appear in the config file.
## The first one which matches the window wins and later assignments are not considered.
##
## Syntax:
#assign <criteria> [→] [workspace] [number] <workspace>
#assign <criteria> [→] output left|right|up|down|primary|nonprimary|<output>

## Also, the arrow is not required, it just looks good :-). If you decide to use it, 
## it has to be a UTF-8 encoded arrow, not -> or something like that.
##
## To get the class and instance, you can use `xprop`. After clicking on the window, 
## you will see the following output: WM_CLASS(STRING) = "irssi", "URxvt"
## The first part of the WM_CLASS is the instance ("irssi" in this example), 
## the second part is the class ("URxvt" in this example).
##
assign [class="Lxappearance|Nitrogen"] 6
assign [class="Pavucontrol|Xfce4-power-manager-settings"] 6

##-- Window Rules ---------------------------

## Arbitrary commands for specific windows (for_window)
##
## With the `for_window` directive, you can let i3 execute any command when it encounters
## a specific window. This can be used to set windows to floating or to change their
## border style, for example.
##
## Syntax: for_window <criteria> <command>
##
for_window [window_role="pop-up"] floating enable
for_window [window_role="task_dialog"] floating enable
for_window [class="alacritty-float|Music"] floating enable
for_window [class="Pcmanfm|Onboard|Yad"] floating enable
for_window [class="Lxappearance|Nitrogen"] floating enable
for_window [class="Pavucontrol|Xfce4-power-manager-settings|Nm-connection-editor"] floating enable
for_window [class="feh|Viewnior|Gpicview|Gimp|MPlayer"] floating enable
for_window [class="Kvantum Manager|qt5ct"] floating enable
for_window [class="Calamares|calamares"] floating enable
for_window [class="VirtualBox Manager|qemu|Qemu-system-x86_64"] floating enable